<!DOCTYPE html>
<html>
  
  <head>
    <title><%= title %> - 小遊戲</title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel='stylesheet' href='/stylesheets/backgroundImage.css' />
    <style>
      canvas {
          border:1px solid #f1f1f1;
          background-color: #aeecab;
      }
    </style>
  </head>
  <body onload="startGame()">
    <div class="content">
      

      <div id=marks></div>
        <div style="text-align:center;">
          <button onmousedown="moveup()" onmouseup="clearmove()" ontouchstart="moveup()">上</button><br><br>
          <button onmousedown="moveleft()" onmouseup="clearmove()" ontouchstart="moveleft()">左</button>
          <button onmousedown="moveright()" onmouseup="clearmove()" ontouchstart="moveright()">右</button><br><br>
          <button onmousedown="movedown()" onmouseup="clearmove()" ontouchstart="movedown()">下</button>
      </div>
      <p><b style="font-size: 24px;">參與遊戲，有機會獲得現金</b></p>
      <%- include('header') %>
    </div>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"
    integrity= 
    "sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" 
    crossorigin="anonymous">
    </script>
    <script>

      let myGamePiece;
      let myObstacles = [];
      let mySound;
      let myMusic;
      let myScore;
      
      
      function startGame() {
        //myGamePiece = new component(30, 30, "smiley.gif", 10, 120, "image");
        //myGamePiece = new component(30, 30, "green", 10, 120);
        myGamePiece = new image(120,80,10,120,"media/cat.jpg")
        myScore = new component("30px", "Consolas", "green", 280, 40, "text");
        mySound = new sound("media/貓咪喵喵叫可愛音效.mp3");
        myMusic = new sound("media/學貓叫.mp3");
        myMusic.play();
        myGameArea.start();
      }
      
      var myGameArea = {
          canvas : document.createElement("canvas"),
          start : function() {
              this.canvas.width = document.body.offsetWidth-120;
              this.canvas.height = 500;
              this.context = this.canvas.getContext("2d");
              document.body.insertBefore(this.canvas, document.body.childNodes[0]);
              this.frameNo = 0;
              this.interval = setInterval(updateGameArea, 20);
          },
          stop : function() {
              clearInterval(this.interval);
          },    
          clear : function() {
              this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
          }
      }
      
      function image(width, height, x, y, src) {
          this.src = src;
          this.width = width;
          this.height = height;
          this.speedX = 0;
          this.speedY = 0;    
          this.x = x;
          this.y = y;  
          
          
      
          this.newPos = function() {
              this.x += this.speedX;
              this.y += this.speedY;    
          }    
          this.update = function() {
              ctx = myGameArea.context;
              //ctx.fillStyle = "blue";
              //ctx.fillRect(this.x, this.y, this.width, this.height);
      
              let img = new Image();
              img.src = this.src;
              img.onload = ()=>{
                  ctx.drawImage(img,this.x,this.y,this.width,this.height)
              }
          }
          this.crashWith = function(otherobj) {
              var myleft = this.x;
              var myright = this.x + (this.width);
              var mytop = this.y;
              var mybottom = this.y + (this.height);
              var otherleft = otherobj.x;
              var otherright = otherobj.x + (otherobj.width);
              var othertop = otherobj.y;
              var otherbottom = otherobj.y + (otherobj.height);
              var crash = true;
              if ((mybottom < othertop) || (mytop > otherbottom) || (myright < otherleft) || (myleft > otherright)) {
                  crash = false;
              }
              return crash;
          }
      }
      
      function everyinterval(n) {
          if ((myGameArea.frameNo / n) % 1 == 0) {return true;}
          return false;
      }
      
      function component(width, height, color, x, y, type) {
          this.type = type;
          if (type == "image") {
            this.image = new Image();
            this.image.src = color;
          }
          this.width = width;
          this.height = height;
          this.speedX = 0;
          this.speedY = 0;    
          this.x = x;
          this.y = y;    
          this.update = function() {
              ctx = myGameArea.context;
              if (this.type == "text") {
                ctx.font = this.width + " " + this.height;
                ctx.fillStyle = color;
                ctx.fillText(this.text, this.x, this.y);
              } else {
                ctx.fillStyle = color;
                ctx.fillRect(this.x, this.y, this.width, this.height);
          }
          }
          this.newPos = function() {
              this.x += this.speedX;
              this.y += this.speedY;  
          }    
          this.crashWith = function(otherobj) {
              var myleft = this.x;
              var myright = this.x + (this.width);
              var mytop = this.y;
              var mybottom = this.y + (this.height);
              var otherleft = otherobj.x;
              var otherright = otherobj.x + (otherobj.width);
              var othertop = otherobj.y;
              var otherbottom = otherobj.y + (otherobj.height);
              var crash = true;
              if ((mybottom < othertop) || (mytop > otherbottom) || (myright < otherleft) || (myleft > otherright)) {
                  crash = false;
              }
              return crash;
          }
      }
      
      function updateGameArea() {
          var x, height, gap, minHeight, maxHeight, minGap, maxGap;
          for (i = 0; i < myObstacles.length; i += 1) {
              if (myGamePiece.crashWith(myObstacles[i])) {
                    mySound.play();
                    myMusic.stop();
                    myGameArea.stop();
                    const month = new Date().getMonth()<9?  "0"+(new Date().getMonth()+1): new Date().getMonth()
                    const yearMonthString = ""+new Date().getFullYear()+month;
                    $.post("/game/request", 
                        { 
                            userId: '<%= user._id %>', 
                            score: myGameArea.frameNo+1,
                            date: yearMonthString
                        }, 
                        (data, status)=> { 
                            if(data.tickets) alert("恭喜！你已獲得超過 "+data.thresholdScore+" 分，可獲得現金。你的分數為 "+myGameArea.frameNo+" 分。\n你的舊分數為 "+data.oldScore+" 。")
                            else if(data.newScore) alert("你破了新紀錄！你的分數為 "+myGameArea.frameNo+" 分。\n你的舊分數為 "+data.oldScore+" 。");
                            else alert("加油！請再接再勵。你的分數為 "+myGameArea.frameNo+" 分。\n你的舊分數為 "+data.oldScore+" 。")
                            return;
                        }); 
                    
              } 
          }
          myGameArea.clear();
          myGameArea.frameNo += 1;
          //console.log(myGameArea.frameNo)
          
          if (myGameArea.frameNo == 1 || everyinterval(250)) {
              x = myGameArea.canvas.width;
              minHeight = 20;
              maxHeight = 200;
              height = Math.floor(Math.random()*(maxHeight-minHeight+1)+minHeight);
              minGap = 100;
              maxGap = 200;
              gap = Math.floor(Math.random()*(maxGap-minGap+1)+minGap);
              myObstacles.push(new component(10, height, "green", x, 0));
              myObstacles.push(new component(10, x - height - gap, "green", x, height + gap));
          }
          for (i = 0; i < myObstacles.length; i += 1) {
              myObstacles[i].x -= 1;
              myObstacles[i].update();
          }
          myScore.text = "SCORE: " + myGameArea.frameNo;
          myScore.update();
          myGamePiece.newPos();
          myGamePiece.update();
      }
      
      function sound(src) {
          this.sound = document.createElement("audio");
          this.sound.src = src;
          this.sound.setAttribute("preload", "auto");
          this.sound.setAttribute("controls", "none");
          this.sound.style.display = "none";
          document.body.appendChild(this.sound);
          this.play = function(){
              this.sound.play();
          }
          this.stop = function(){
              this.sound.pause();
          }    
      }
      
      function everyinterval(n) {
          if ((myGameArea.frameNo / n) % 1 == 0) {return true;}
          return false;
      }
      
      function moveup() {
          myGamePiece.speedY = -1; 
      }
      
      function movedown() {
          myGamePiece.speedY = 1; 
      }
      
      function moveleft() {
          myGamePiece.speedX = -1; 
      }
      
      function moveright() {
          myGamePiece.speedX = 1; 
      }
      
      function clearmove() {
          myGamePiece.speedX = 0; 
          myGamePiece.speedY = 0; 
      }
      
      </script>

  </body>

  
   
</html>
